From 0a8e63151d9900da1d668d20938f41f029280099 Mon Sep 17 00:00:00 2001
From: Alexander Akulich <akulichalexander@gmail.com>
Date: Tue, 28 Jan 2020 23:20:28 +0300
Subject: [PATCH] MainLogModel: Processing SQL query only on account manager
 ready

---
 KTp/Declarative/mainlogmodel.cpp | 19 ++++++++++++++++++-
 KTp/Declarative/mainlogmodel.h   |  1 +
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/KTp/Declarative/mainlogmodel.cpp b/KTp/Declarative/mainlogmodel.cpp
index 0266570c..a136bf15 100644
--- a/KTp/Declarative/mainlogmodel.cpp
+++ b/KTp/Declarative/mainlogmodel.cpp
@@ -28,6 +28,7 @@
 #include <TelepathyQt/AccountManager>
 #include <TelepathyQt/PendingOperation>
 #include <TelepathyQt/PendingChannel>
+#include <TelepathyQt/PendingReady>
 #include <TelepathyQt/TextChannel>
 #include <TelepathyQt/Channel>
 #include <TelepathyQt/ChannelClassSpecList>
@@ -116,6 +117,15 @@ MainLogModel::~MainLogModel()
 
 }
 
+void MainLogModel::onAccountManagerReady()
+{
+    if (!m_accountManager->isReady()) {
+        qWarning() << "Unable to initialize account manager";
+        return;
+    }
+    processQueryResults(m_query);
+}
+
 void MainLogModel::processQueryResults(QSqlQuery query)
 {
     while (query.next()) {
@@ -304,7 +314,14 @@ void MainLogModel::setAccountManager(const Tp::AccountManagerPtr &accountManager
 {
     m_accountManager = accountManager;
 
-    processQueryResults(m_query);
+    if (m_accountManager) {
+        if (m_accountManager->isReady()) {
+            onAccountManagerReady();
+        } else {
+            Tp::PendingOperation *readyOp = m_accountManager->becomeReady();
+            connect(readyOp, &Tp::PendingOperation::finished, this, &MainLogModel::onAccountManagerReady);
+        }
+    }
 }
 
 QObject* MainLogModel::observerProxy() const
diff --git a/KTp/Declarative/mainlogmodel.h b/KTp/Declarative/mainlogmodel.h
index 071365ce..7ebe4aa2 100644
--- a/KTp/Declarative/mainlogmodel.h
+++ b/KTp/Declarative/mainlogmodel.h
@@ -125,6 +125,7 @@ public Q_SLOTS:
 private Q_SLOTS:
     void handleChannel(const Tp::AccountPtr &account, const Tp::TextChannelPtr &channel);
     void onConversationChanged();
+    void onAccountManagerReady();
 
 private:
     void setupSignals(Conversation *conversation) const;
